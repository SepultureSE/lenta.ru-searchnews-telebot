from fake_useragent import UserAgent
from configparser import ConfigParser
from bs4 import BeautifulSoup
from keyboa import keyboa_maker
from datetime import datetime
import sqlite3
import lxml
import requests
import telebot
import os


class Config:
    """ –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º """
    default_config_name = 'config.ini'  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é

    def __init__(self):
        self.__config = ConfigParser()

        # —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥. —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
        if not os.path.exists(self.default_config_name):
            self.create_config_file()

        # –ø–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ñ–∏–≥. —Ñ–∞–π–ª –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç–∞–º —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        self.__config.read(self.default_config_name)
        self.token = self.__config.get('BOT_SETTINGS', 'token')
        self.search_responses_limit = self.__config.get('PARSER_SETTINGS', 'search_responses_limit')
        self.main_news_limit = self.__config.get('PARSER_SETTINGS', 'main_news_limit')

    def create_config_file(self):
        """ –ú–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥. —Ñ–∞–π–ª """
        # –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–µ–∫—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
        self.__config.add_section('BOT_SETTINGS')
        self.__config.set('BOT_SETTINGS', 'token', 'None')

        # —Å–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ä—Å–µ—Ä–∞
        self.__config.add_section('PARSER_SETTINGS')
        self.__config.set('PARSER_SETTINGS', 'search_responses_limit', '5')
        self.__config.set('PARSER_SETTINGS', 'main_news_limit', '5')

        # —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥. —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ —Å–µ–∫—Ü–∏—è–º–∏
        with open(self.default_config_name, 'w') as config_file:
            self.__config.write(config_file)


class Database:
    """ –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î """
    def __init__(self):
        self.__connection = sqlite3.connect('data.sqlite', check_same_thread=False)
        self.__cursor = self.__connection.cursor()
        self.__create_database()

    def __create_database(self):
        """ –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """
        self.__cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER,
            username TEXT,
            start_time TEXT
        );''')
        self.__connection.commit()

        self.__cursor.execute('''CREATE TABLE IF NOT EXISTS requests (
            telegram_id INTEGER,
            start_time TEXT,
            request_type TEXT,
            request_data TEXT
        );''')
        self.__connection.commit()

    def add_user(self, telegram_id: int, username: str, start_time: datetime) -> int:
        """ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É """
        self.__cursor.execute(f'SELECT telegram_id FROM users WHERE telegram_id={telegram_id};')

        if self.__cursor.fetchone() is None:
            self.__cursor.execute('INSERT INTO users VALUES (?, ?, ?);', (telegram_id, username, start_time))
            self.__connection.commit()
            return 1
        else:
            return 0

    def get_all_users(self) -> list:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π """
        self.__cursor.execute('SELECT * FROM users;')
        return self.__cursor.fetchall()

    def get_specific_user(self, telegram_id: int) -> tuple:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        self.__cursor.execute(f'SELECT * FROM users WHERE telegram_id={telegram_id};')
        return self.__cursor.fetchone()

    def update_username(self, telegram_id: int, username: str) -> None:
        """ –ò–∑–º–µ–Ω—è–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–æ–ª–µ–µ –Ω–æ–≤—ã–π """
        self.__cursor.execute(f'UPDATE users SET username="{username}" WHERE telegram_id={telegram_id};')
        self.__connection.commit()

    def add_request(self, telegram_id: int, start_time: datetime, request_type: str, request_data: str) -> None:
        """ –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º """
        self.__cursor.execute(f'INSERT INTO requests VALUES (?, ?, ?, ?);',
                              (telegram_id, start_time, request_type, request_data))
        self.__connection.commit()

    def get_all_requests(self) -> list:
        """ –í–æ–∑–≤–∞—â–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ """
        self.__cursor.execute(f'SELECT * FROM requests;')
        return self.__cursor.fetchall()

    def get_main_requests(self) -> list:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ """
        self.__cursor.execute(f'SELECT * FROM requests WHERE request_type="main_news";')
        return self.__cursor.fetchall()

    def get_searched_requests(self) -> list:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É """
        self.__cursor.execute(f'SELECT * FROM requests WHERE request_type="news_by_request";')
        return self.__cursor.fetchall()


class Parser:
    """ –ö–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ Lenta.ru """
    @staticmethod
    def get_main_news(max_news: int) -> list:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Å—ã–ª–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π """
        # –æ—Ç–ø—Ä–∞–ª–≤—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ "–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
        # –ø—Ä–∏—à–ª–æ—Å—å –ø—Ä–∏–±–µ–≥–Ω—É—Ç—å –∫ –ø–∞—Ä—Å–∏–Ω–≥—É –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –≤—ã–≥—Ä—É–∂–∞—é—Ç—Å—è
        # –∑–∞–ø—Ä–æ—Å–æ–º, –∫–∞–∫ —è –ø–æ–Ω—è–ª
        r = requests.get('https://lenta.ru/')
        soup = BeautifulSoup(r.text, features='lxml')
        main_news_block = soup.findChild('div', attrs={'class': 'b-yellow-box__wrap'})
        main_news_div_list = main_news_block.find_all('a')
        main_news_sorted_list = list()

        # –æ—Ç–¥–µ–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏
        for total, post in enumerate(main_news_div_list):
            # –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª —Å—Ç–∞—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ CONFIG.INI -
            # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª
            if total >= int(max_news):
                break

            # –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, —É–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ
            # —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫—É –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
            main_news_sorted_list.append((
                post.text.replace('\xa0', ' '), 'https://lenta.ru' + post['href']
            ))

        return main_news_sorted_list

    @staticmethod
    def get_news_by_request(request: str, max_news: int) -> list:
        # —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º user-agent`–æ–º
        fake_agent = {'user_agent': UserAgent().random}

        # GET –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ –ø–æ–∏—Å–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
        # (–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å —è –ø—Ä–∏—à–µ–ª –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ
        # —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π)
        r = requests.get('https://lenta.ru/search/v2/process', headers=fake_agent, params={
            'from': '0',
            'size': str(max_news),
            'sort': '2',
            'title_only': '1',
            'domain': '1',
            'query': request
        })

        # –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –∏ —Å—Å—ã–ª–∫–∏
        found_articles = list()

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å—Å—ã–ª–∫–æ–π —Å—Ç–∞—Ç—å–∏
        for post in r.json()['matches']:
            found_articles.append((post['title'], post['rightcol'], post['url']))

        return found_articles


def main():
    """ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Telegram –±–æ—Ç–∞ """
    global received_data, page

    def found_articles_inline(article_url: str) -> str:
        """ –°–æ–∑–¥–∞–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ —á—Ç–µ–Ω–∏—è —Å—Å—ã–ª–∫–æ–π """
        return telebot.types.InlineKeyboardMarkup().row(
            telebot.types.InlineKeyboardButton(text='üîô', callback_data='found_articles_left'),
            telebot.types.InlineKeyboardButton(text='üìì Read', callback_data='found_articles_read', url=article_url),
            telebot.types.InlineKeyboardButton(text='üîú', callback_data='found_articles_right')
        )

    def main_news_inline(article_url: str) -> str:
        """ –°–æ–∑–¥–∞–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ —á—Ç–µ–Ω–∏—è —Å—Å—ã–ª–∫–æ–π """
        return telebot.types.InlineKeyboardMarkup().row(
            telebot.types.InlineKeyboardButton(text='üîô', callback_data='main_news_left'),
            telebot.types.InlineKeyboardButton(text='üìì Read', callback_data='main_news_read', url=article_url),
            telebot.types.InlineKeyboardButton(text='üîú', callback_data='main_news_right')
        )

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞
    menu_keyboard = telebot.types.ReplyKeyboardMarkup(True, False)  # —Å–æ–∑–¥–∞–Ω–∏–µ ReplyMarkup –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    menu_keyboard.row('‚òë –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏')  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    menu_keyboard.row('üëÅ‚Äçüó® –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π')  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π, –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    def create_page_nav(data: list, input_page: int) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ """
        list_to_dict = dict()

        # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ list –≤ dict
        for index, element in enumerate(data):
            list_to_dict[index + 1] = element

        return list_to_dict[input_page]

    @bot.message_handler(commands=['start'])
    def start_message(message):
        """ –í—ã–≤–æ–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è """
        db.add_user(message.from_user.id, message.from_user.username, datetime.now())

        bot.send_message(message.chat.id, '''üëÅ‚Äçüó® –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π | *Lenta.ru*\n
–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å–∞–π—Ç–µ *Lenta.ru*.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É Telegram\`–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞''',
                         parse_mode='Markdown', reply_markup=menu_keyboard)

    @bot.message_handler(content_types=['text'])
    def parsing_mode(message):
        """ –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω ReplyMarkup –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ """
        global received_data, page

        db.update_username(message.from_user.id, message.from_user.username)

        if message.text == '‚òë –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏':
            page = 1
            bot.send_message(message.from_user.id, 'üì° *–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ ...*', parse_mode='Markdown')

            received_data = Parser.get_main_news(config.main_news_limit)
            construct_message = f'üìÆ *{received_data[page - 1][0]}*\n\n\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{len(received_data)}'

            bot.send_message(message.from_user.id, construct_message,
                             parse_mode='Markdown', reply_markup=main_news_inline(received_data[page - 1][1]))

        elif message.text == 'üëÅ‚Äçüó® –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π':
            page = 1
            msg = bot.send_message(message.from_user.id, 'üéô *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏*', parse_mode='Markdown')

            # –æ–∂–∏–¥–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç
            bot.register_next_step_handler(msg, searched_news_response)

        else:
            bot.send_message(message.from_user.id, '‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*', parse_mode='Markdown')

    def searched_news_response(message):
        """ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—â–µ—Ç —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ """
        global received_data

        bot.send_message(message.from_user.id, 'üì° *–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ ...*', parse_mode='Markdown')
        received_data = Parser.get_news_by_request(message.text, config.main_news_limit)

        if len(received_data) == 0:
            bot.send_message(message.from_user.id,
                '‚ùå *–ù–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –ø–æ –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ*', parse_mode='Markdown')
            return

        data_for_message = create_page_nav(received_data, page)

        construct_message = f'''üìÆ *{data_for_message[0]}*
\n_‚Äî {data_for_message[1]}_\n\n\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{len(received_data)}'''

        bot.send_message(message.from_user.id, construct_message, parse_mode='Markdown',
                         disable_web_page_preview=True, reply_markup=found_articles_inline(data_for_message[2]))

    @bot.callback_query_handler(func=lambda call: call.data in ['found_articles_left', 'found_articles_right'])
    def found_articles_page_navigation(call):
        """ –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è """
        global page, received_data

        if call.data == 'found_articles_left':
            if page == 1:
                page = len(received_data)
            else:
                page -= 1

        elif call.data == 'found_articles_right':
            if page == len(received_data):
                page = 1
            else:
                page += 1

        try:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'''üìÆ *{create_page_nav(received_data, page)[0]}*
\n_‚Äî {create_page_nav(received_data, page)[1]}_\n\n
üìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{len(received_data)}''',
                                  parse_mode='Markdown', reply_markup=found_articles_inline(received_data[page - 1][2]))
        except telebot.apihelper.ApiException:
            pass

        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data in ['main_news_left', 'main_news_right'])
    def main_news_page_navigation(call):
        """ –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è """
        global page, received_data

        if call.data == 'main_news_left':
            if page == 1:
                page = len(received_data)
            else:
                page -= 1

        elif call.data == 'main_news_right':
            if page == len(received_data):
                page = 1
            else:
                page += 1

        try:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'''üìÆ *{create_page_nav(received_data, page)[0]}*
\n\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{len(received_data)}''',
                                  parse_mode='Markdown', reply_markup=main_news_inline(received_data[page - 1][1]))
        except telebot.apihelper.ApiException:
            pass

        bot.answer_callback_query(call.id)

    bot.polling(none_stop=True)


if __name__ == '__main__':
    page = 1  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    received_data = 'None'  # –∏–º–µ—é—â–∏–µ—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã–µ

    # —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    config = Config()
    bot = telebot.TeleBot(config.token)
    db = Database()

    # –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
    main()